160121 1723
IMPORTANT NOTE ON  modules.
(1) USE // paths AND (2) remember to use the path FROM project root. that is include ..//src//...

************** ONE THING AT A TIME ************** 1TAT ******************************
1TAT: REFACTOR currentCode TO Functional
1TAT: HANDLE Word Selection AND Highlighting.
1TAT:  LOAD chapters || books FROM data source
 .. Particularly Lectures On Faith
1TAT: IMPROVE css
1TAT: RENEW WebStorm
**************** DONE *************************************************************
20160130    1TAT: USE Ramda FOR Functional Coding: can Code w/ ramda. Will use html <style ref

****************  CODING SHORTCUTS: ***********************************************
SWITCH Tabs <> ToolWindows                  Ctrl+Tab
NAVIGATE TO Last Edit                       Ctrl+Shft+BackSpace
NAVIGATE TO Forward | Back                  Ctrl+Alt +Left | Right
Column Selection Mode                       Alt+Shift+Insert


**************** CONCEPTS  ********
[1, 2, 3].map(plus1)   ==>> [2, 3, 4]
And map is a functor!

A functor is a function, given a value and a function, does the right thing.

To be more specific.
A functor is a function, given a value and a function, unwraps the values to get to its inner value(s), calls the given function with the inner value(s), wraps the returned values in a new structure, and returns the new structure.

Thing to note here is that depending on the "Type" of the value, the unwrapping may lead to a value or a set of values.
*************************


DEALING W/ const: It binds names to expressions
We can bind any expression. Functions are expressions, so we can bind helper functions:

(d) => {
  const calc = (diameter) => {
    const PI = 3.14159265;

    return diameter * PI
  };

  return "The circumference is " + calc(d)
}


//LEARNING A LITTLE ABOUT pipeline and Currying
let ___cut, ___srt, ___ret, ___msg, ___pipe, ___data;

___cut = (a1) =>
    (a2) =>  C_It(`(a1:${a1}, a2:${a2}) >> 10a1+a2 = ${a2 + 10 * a1}`);
___cut(10)(3);  //>>a1:10, a2:3 >> 103
___cut(3)(10);  //>>a1:3, a2:10 >> 40
// ++++++++++++++++++++++++++++
___ret = pipeline (
    () => 10,        // this is a2:10
    ___cut(3)          // a1:3. cut is a VALUE, not function, ready be called in ___ret()
);
___ret();           //calls cut VALUE >> >>a1:3, a2:10 >> 40
___ret(222);           //calls cut VALUE >> >>a1:3, a2:10 >> 40
___ret(444);           //calls cut VALUE >> >>a1:3, a2:10 >> 40
//****************
___ret = pipeline (
    () => 3,    // a2:3
    ___cut,
    () => 10,   // WOOPS ??  a2:10 ????
    ___cut       // a1:NAN, a2:10
);
___ret(3333333)(5);       //>> cut function. >> a1:10, a2:5 >> 105
___ret(3333333)(1);       //>> cut function. >> a1:10, a2:1 >> 101
___ret(3333333)(7);       //>> cut function. >> a1:10, a2:7 >> 107

