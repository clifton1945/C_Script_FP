1TAT: 160121  UPDATE style AFTER A READ Chapter key press TO UPDATE_ReadGrps
    THINKING OUT LOUD -
    What is function: main( book )
        CALL BindHandler
            Keys Events:  CALL SET_All_Verse_ReadGRp_Styles
            Mouse Events:  CALL SET_All_Verse_HiLite_Styles
                           CALL SET_All_Verse_ReadGRp_Styles

    maybe DEFINE the Book
    CALL BindHandler (book) WHICH SHOULD  //because Events Only change
        which would set two maybe global || maybe curried const:

        let curChptr_CRGrps = query(
            '.ChptrReadGrps > .cur')
            (book);
        let curChptr_VRGrps = query('
            .chptr > .VerseReadGrps > .cur')
            (curChptr_CRGrps);
    THEN an Event
        CALL: SET_All_Verse_ReadGRp_Styles //because initially there will not be an Event
            CALL: SET_curChptr_CRGrps = function SET_curChptr_CRGrps ( book) {
                return curChptr_CRGrps (book);
            CALL: SET_curChptr_VRGrps = function SET_curChptr_VRGrps ( curChptr_CRGrps) {
                return  curChptr_VRGrps (curChptr_CRGrps);

        BIND Events TO UPDATE_ReadGrps(chapter OR verse Read Grps)(direction)
            There are 2 types of Events
                Key Presses TO READ RESET curChptr_CRGrps && || curChptr_VRGrps
                    CALL: SET_All_Verse_ReadGRp_Styles //because curChptr_CRGrps && || curChptr_VRGrps were UPDATED.
                Mouse events TO FIND || REPLACE regex matches
                    CALL: SET_All_Verse_HiLite_Styles  // to be figured out
                    CALL: SET_All_Verse_ReadGRp_Styles //because Verse CONTENT HAS BEEN ALTERED.

    Hey, for now lets use the BindHandler Block to contain
        curChptr_CRGrps && || curChptr_VRGrps
    OR, how about contain the ReadGrp constant INSIDE SET_All_Verse_ReadGRp_Styles ???



1TAT: HANDLE Word Selection AND Highlighting.
1TAT:  LOAD chapters || books FROM data source
 .. Particularly Lectures On Faith
1TAT: RENEW WebStorm




document.getSelection looks good to transfer html content ( in Chrome ).
THEN looks like use querySelector[All] to get all locations of selection
THEN <mark> or something TO CEE them.


DEALING W/ const: It binds names to expressions
We can bind any expression. Functions are expressions, so we can bind helper functions:

(d) => {
  const calc = (diameter) => {
    const PI = 3.14159265;

    return diameter * PI
  };

  return "The circumference is " + calc(d)
}


//LEARNING A LITTLE ABOUT pipeline and Currying
let ___cut, ___srt, ___ret, ___msg, ___pipe, ___data;

___cut = (a1) =>
    (a2) =>  C_It(`(a1:${a1}, a2:${a2}) >> 10a1+a2 = ${a2 + 10 * a1}`);
___cut(10)(3);  //>>a1:10, a2:3 >> 103
___cut(3)(10);  //>>a1:3, a2:10 >> 40
// ++++++++++++++++++++++++++++
___ret = pipeline (
    () => 10,        // this is a2:10
    ___cut(3)          // a1:3. cut is a VALUE, not function, ready be called in ___ret()
);
___ret();           //calls cut VALUE >> >>a1:3, a2:10 >> 40
___ret(222);           //calls cut VALUE >> >>a1:3, a2:10 >> 40
___ret(444);           //calls cut VALUE >> >>a1:3, a2:10 >> 40
//****************
___ret = pipeline (
    () => 3,    // a2:3
    ___cut,
    () => 10,   // WOOPS ??  a2:10 ????
    ___cut       // a1:NAN, a2:10
);
___ret(3333333)(5);       //>> cut function. >> a1:10, a2:5 >> 105
___ret(3333333)(1);       //>> cut function. >> a1:10, a2:1 >> 101
___ret(3333333)(7);       //>> cut function. >> a1:10, a2:7 >> 107

